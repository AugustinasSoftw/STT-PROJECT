"use client";
import { CVPRow } from "@/app/db/schema";

import { useState } from "react";
import { SaveButton } from "./SaveButton";

export default function NoticeClient({ rowValue }: { rowValue: CVPRow }) {
  // Mock AI & historical analysis
  const aiAnalysis = {
    riskScore: 0.82,
    summary:
      "Supplier ENAV S.p.A. has been awarded 11 of the last 13 contracts from this buyer in 2024. " +
      "Award values are on average 42% higher than comparable CPV categories. " +
      "Detected terms: 'extension', 'urgent procurement', 'framework'.",
    keyFactors: [
      "Single-bid submission (1 offer)",
      "Repetitive buyer-supplier pairing",
      "High award-to-estimate ratio",
      "Expedited award timing",
    ],
  };

  const supplierHistory = [
    { year: 2021, contracts: 4, total: 650000 },
    { year: 2022, contracts: 6, total: 810000 },
    { year: 2023, contracts: 8, total: 950000 },
    { year: 2024, contracts: 11, total: 1280000 },
  ];

  return (
    <main className="p-8 space-y-8">
      {/* Header */}
      <header className="flex items-center justify-between">
        <div className="flex flex-row gap-3">
           <h1 className="text-2xl font-semibold">Notice {rowValue.notice_id}</h1>
        <RiskBadge score={aiAnalysis.riskScore} />
        </div>
       
        <div>
           
           <SaveButton rowValue={rowValue}/>
       
        </div>
       
    
      </header>

      {/* Summary grid */}
      <section className="grid md:grid-cols-2 gap-6">
        <Field label="Buyer" value={rowValue.buyer_name} />
        <Field label="Winner" value={rowValue.winner_name} />
        <Field label="CPV" value={rowValue.cpv} />
        <Field label="Award Value" value={`â‚¬${rowValue.award_value_eur}`} />
        <Field label="Publish Date" value={rowValue.publish_date} />
        <Field label="Procedure Type" value={rowValue.procedure_type} />
      </section>

      {/* Description */}
      <section className="rounded-xl border border-zinc-800 p-5">
        <h2 className="text-lg font-semibold mb-2">Description</h2>
        <p className="text-sm dark:text-zinc-300 whitespace-pre-wrap">
          {rowValue.procedure_description ?? "-"}
        </p>
      </section>

      {/* AI Analysis */}
      <section className="rounded-xl border border-zinc-800 p-5 space-y-3">
        <h2 className="text-lg font-semibold flex items-center gap-2">
          AI Risk Analysis
          <span className="text-sm dark:text-zinc-400">
            (Generated by model v2.3)
          </span>
        </h2>
        <p className="text-sm dark:text-zinc-300">{aiAnalysis.summary}</p>

        <ul className="list-disc list-inside text-sm dark:text-zinc-400 mt-2">
          {aiAnalysis.keyFactors.map((k, i) => (
            <li key={i}>{k}</li>
          ))}
        </ul>
      </section>

      {/* Supplier History */}
      <section className="rounded-xl border border-zinc-800 p-5">
        <h2 className="text-lg font-semibold mb-3">Supplier History</h2>
        <div className="text-sm dark:text-zinc-400">
          <table className="w-full text-left border-collapse">
            <thead>
              <tr className="border-b border-zinc-800 dark:text-zinc-500">
                <th className="pb-2">Year</th>
                <th className="pb-2">Contracts</th>
                <th className="pb-2">Total Value (â‚¬)</th>
              </tr>
            </thead>
            <tbody>
              {supplierHistory.map((h) => (
                <tr key={h.year} className="border-b border-zinc-900">
                  <td className="py-1">{h.year}</td>
                  <td className="py-1">{h.contracts}</td>
                  <td className="py-1">{h.total.toLocaleString()}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </section>
    </main>
  );
}

/* ðŸ”¹ COMPONENTS */

function Field({ label, value }: any) {
  return (
    <div className="rounded-lg border border-zinc-800 p-4">
      <div className="text-xs dark:text-zinc-500">{label}</div>
      <div className="text-sm dark:text-zinc-300">{value || "-"}</div>
    </div>
  );
}

function RiskBadge({ score }: any) {
  let label = "Low Risk";
  let color = "bg-green-500/20 text-green-400";

  if (score > 0.4 && score <= 0.7)
    (label = "Medium Risk"), (color = "bg-yellow-500/20 text-yellow-400");
  else if (score > 0.7)
    (label = "High Risk"), (color = "bg-red-500/20 text-red-400");

  return (
    <span className={`px-3 flex justify-center items-center rounded-full text-sm font-medium ${color}`}>
      {label} ({Math.round(score * 100)}%)
    </span>
  );
}
